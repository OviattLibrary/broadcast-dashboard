<?php
// $Id$
/**
 * @file
 * Broadcast Dashboard module file
 * 
 * This module 'broadcasts' pre-written or custom inserted text to specified areas of a website when switched on.
 */

/**
 * Implements hook_help().
 */

function broadcast_dashboard_help($path, $arg) {
  if ($path === 'admin/help#broadcast_dashboard') {
    return t ('The Broadcast Dashboard module allows for text notifications to be pushed to specified areas of the website when switched on.');
  }
}

/**
 * Implements hook_menu().
 */

function broadcast_dashboard_menu() {
  $items = array();

  $items['admin/config/system/broadcast_dashboard'] = array(
    'title' => 'Broadcast Dashboard',
    'description' => 'Set a message for the Broadcast Dashboard module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('broadcast_dashboard_form'),
    'access_callback' => TRUE,
    'access arguments' => array('administer broadcast dashboard'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/broadcast_dashboard/settings'] = array(
    'title' => 'Broadcast Dashboard Settings',
    'description' => 'Configuration for the Broadcast Dashboard module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('broadcast_dashboard_settings_form'),
    'access_callback' => TRUE,
    'access arguments' => array('administer broadcast dashboard'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}

/**
 * Implements hook_permission().
 */
function broadcast_dashboard_permission() {
  return array(
    'administer broadcast dashboard' => array (
      'title' => t('Administer Broadcast Dashboard'),
      'description' => t('Change configuration for, and send out, Broadcast Dashboard alerts.'),
    ),
  );
}

/**
 * Implements hook_forms().
 */

function broadcast_dashboard_forms($form_id, $args) {
  // Simply reroute the (non-existing) $form_id
  $forms['broadcast_dashboard_form'] = array(
    'callback' => 'broadcast_dashboard_form',
  );

  // Reroute the $form_id and prepend an additional argument that gets passed to
  // the 'mymodule_main_form' form builder function.
  $forms['broadcast_dashboard_settings_form'] = array(
    'callback' => 'broadcast_dashboard_settings_form',
  );

  return $forms;
}

/**
 * Implements hook_form().
 */

function broadcast_dashboard_form($form_state) {
  $theme_default = variable_get('theme_default', NULL);
  $regions = system_region_list($theme_default, $show = REGIONS_ALL, $labels = TRUE);

  drupal_set_message(t('To edit module configuration, see the <a href="/admin/config/system/broadcast_dashboard/settings">Settings page</a>.'), 'status', FALSE);

  $form['broadcast_dashboard_active'] = array(
    '#type' => "checkbox",
    '#title' => t('Activate Broadcast'),
    '#return_value' => 1,
    '#default_value' => variable_get('broadcast_dashboard_active', 0),
    '#description' => t('When activated, the selected message will be broadcast on the website.'),
  );

  $form['broadcast_dashboard_message'] = array(
    '#type' => 'select',
    '#title' => t('Type of Message'),
    '#default_value' => variable_get('broadcast_dashboard_message', 0),
    '#options' => array(
      1 => t('Drill'),
      2 => t('Earthquake'),
      3 => t('Fire'),
      4 => t('Shooter'),
      5 => t('Custom'),
    ),
    '#description' => t('Select the type of message to broadcast.'),
    '#required' => FALSE,
    '#states' => array(
    "visible" => array(
      "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
      "required" => array(
      "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
    ),
  );

  $form['broadcast_dashboard_region'] = array(
    '#type' => 'select',
    '#title' => t('Region Selection'),
    '#default_value' => variable_get('broadcast_dashboard_region', 0),
    '#options' => $regions,
    '#description' => t('Select a location to display the message.'),
    '#required' => FALSE,
    '#states' => array(
    "visible" => array(
      "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
      "required" => array(
      "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
    ),
  );

  $form['broadcast_dashboard_custom_message'] = array (
    '#type' => 'textarea',
    '#default_value' => variable_get('broadcast_dashboard_custom_message', 'Broadcast Dashboard Custom Message'),
    '#title' => t('Broadcast Dashboard Custom Message'),
    '#description' => t('Custom message to appear in place of pre-written notification text.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#states' => array(
      "visible" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 5)),
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 5)),
    ),
  );

  $form['broadcast_dashboard_custom_message_color'] = array(
    '#type' => 'select',
    '#title' => t('Color of Message'),
    '#default_value' => variable_get('broadcast_dashboard_custom_message_color', 0),
    '#options' => array(
      1 => t('Success - Green'),
      2 => t('Info - Blue'),
      3 => t('Warning - Yellow'),
      4 => t('Danger - Red'),
    ),
    '#description' => t('Set the custom message color based on Bootstrap alerts.'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 5)),
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 5)),
    ),
  );

  $form['broadcast_dashboard_date_message_posted'] = array(
    '#type' => 'hidden',
    '#title' => t('Date Message Posted'),
    '#default_value' => null,
    '#description' => t('The date and time the message was posted.'),
    '#required' => FALSE,
  );

  // Include Preview Javascript file
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'broadcast_dashboard') . '/broadcast_dashboard_preview.js',
  );

  $test_var = "this is a test from PHP var.";

  // Preview button
  $form['preview'] = array(
    '#type' => 'button',
    '#value' => t('Preview'),
    '#executes_submit_callback' => FALSE,
    '#attributes' => array('onclick' => "return (false);"),//array('onclick' => "runPreview('".$test_var."'); return (false);"),
    '#states' => array(
      "visible" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
    ),
  );

  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  // Preview area
  $form['preview_area'] = array(
    '#type' => 'markup',
    '#markup' => t('<div id="markuparea"></div>'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */

function broadcast_dashboard_form_submit($form, &$form_state) {
  $form_has_errors = FALSE;

  // Active Check
  $current_active = $form_state['values']['broadcast_dashboard_active'];
  $previous_active = variable_get('broadcast_dashboard_active');
  $set_active = $form_state['values']['broadcast_dashboard_active'];
  variable_set('broadcast_dashboard_active', $set_active);

  // Type of Message Check
  $current_msg_type = $form_state['values']['broadcast_dashboard_message'];
  $previous_msg_type = variable_get('broadcast_dashboard_message');
  $set_msg_type = $form_state['values']['broadcast_dashboard_message'];
  variable_set('broadcast_dashboard_message', $set_msg_type);

  // Region Check
  $current_region = $form_state['values']['broadcast_dashboard_region'];
  $previous_region = variable_get('broadcast_dashboard_region');
  $set_region = $form_state['values']['broadcast_dashboard_region'];
  variable_set('broadcast_dashboard_region', $set_region);
  
  // Custom Message Check
  if (!empty($form_state['values']['broadcast_dashboard_custom_message'])) {
    $current_title = $form_state['values']['broadcast_dashboard_custom_message'];
    $previous_title = variable_get('broadcast_dashboard_custom_message');
      // prevents check_plain from double encoding a pre-existing string
      if ($current_title != $previous_title) {
        $set_title = check_plain($form_state['values']['broadcast_dashboard_custom_message']);
        variable_set('broadcast_dashboard_custom_message',
                   $set_title);
      }
  }

  // Custom Message Color Check
  $current_color = $form_state['values']['broadcast_dashboard_custom_message_color'];
  $previous_color = variable_get('broadcast_dashboard_custom_message_color');
  $set_color = $form_state['values']['broadcast_dashboard_custom_message_color'];
  variable_set('broadcast_dashboard_custom_message_color', $set_color);

  // Set date and time message posted
  variable_set('broadcast_dashboard_date_message_posted', date("m/d/Y h:i:sa"));

  if ($form_has_errors == FALSE) {
    drupal_set_message(t('The settings have successfully been saved.'));
  }
}

/**
 * Custom function for testing output.
 *
 * @param bool $active
 *   A boolean that indicates whether Broadcast message should be displayed or not.
 *
 * @param array $msg_type
 *   Array of type of message - includes custom message option.
 *
 * @param string $region
 *   String containing region name to be passed to alter function.
 *
 * @param string $cust_msg
 *   String containing custom Broadcast message.
 *
 * @param string $cust_msg_clr
 *   String containing semantic color for message box.
 *
 */

function broadcast_dashboard_test_display() {                  

  global $theme_key; 
  print 'Our current theme is: ' . $theme_key . '<br>';

  $regions = system_region_list($theme_key, $show = REGIONS_ALL, $labels = FALSE);
  print '<pre>';
  print_r($regions);
  print '</pre>';

  $active = variable_get('broadcast_dashboard_active'); 

  print 'Active state is: ' . $active; print "<br>";
  
  if ($active == 1) {
    $msg_type = variable_get('broadcast_dashboard_message');  
    $region = variable_get('broadcast_dashboard_region');
    $cust_msg = variable_get('broadcast_dashboard_custom_message');
    $cust_msg_clr = variable_get('broadcast_dashboard_custom_message_color');

    print 'Message type is: '. $msg_type; print "<br>";
    print 'Target region is: '. $region; print "<br>";
    print 'Custom message is: '. $cust_msg; print "<br>";
    print 'Custom message color is: '. $cust_msg_clr;
  }

  print '<br>';
  $msg_date = date("m/d/Y h:i:sa");
  print $msg_date;

}

/**
 * Global function to set alert color classes in page_build()
 */
function color_setter($input_color) {
  /* 1 => Success - Green
     2 => Info - Blue
     3 => Warning - Yellow
     4 => Danger - Red')
  */
  if ($input_color == 1) {
      // Success
      return 'alert alert-success';
    } elseif ($input_color == 2) {
      // Info
      return 'alert alert-info';
    } elseif ($input_color == 3) {
      // Warning
      return 'alert alert-warning';
    } elseif ($input_color == 4) {
      // Error
      return 'alert alert-danger';
    } else {
      // Default
      return 'alert alert-info';
    }
}


/**
 * Implements hook_page_build().
 */

function broadcast_dashboard_page_build(&$page) {

//  print '<pre>';
//  print_r($page);
//  print '<pre>';

//  dpm($page);

  $active = variable_get('broadcast_dashboard_active');
  $msg_type = variable_get('broadcast_dashboard_message');
  $preset_msg = null;
  $preset_clr = null;
  $region = variable_get('broadcast_dashboard_region');
  $cust_msg = variable_get('broadcast_dashboard_custom_message');
  $cust_msg_clr = variable_get('broadcast_dashboard_custom_message_color');
  $clr_code = null;
  $msg_date = variable_get('broadcast_dashboard_date_message_posted');

  // DEV - test notification
  $page[$region]['main']['#markup'] = '<div class="alert alert-info" role="alert">This system is currently being tested. Ignore any alerts.' . $page[$region]['main']['#markup'] . '</div>';

  if (!empty($msg_type)) {
    // Pre-set messages
    if ($msg_type == 1) {
      // Drill
      $preset_msg = "There is currently a drill taking place. Please remain calm.";
      $preset_clr = 2;
    } elseif ($msg_type == 2) {
      // Earthquake
      $preset_msg = "There is currently an earthquake. Drop, cover, and hold.";
      $preset_clr = 3;
    } elseif ($msg_type == 3) {
      // Fire
      $preset_msg = "A fire has been reported. Please calmly evacuate the building.";
      $preset_clr = 4;
    } elseif ($msg_type == 4) {
      // Shooter
      $preset_msg = "An active shooter has been reported. Take cover and, if possible, escape through a window or door.";
      $preset_clr = 4;
    } elseif ($msg_type == 5) {
      // Custom

    }
  }

  // No custom, push preset message
  if (($active == 1) && ($msg_type != 5)) {
    $clr_code = color_setter($preset_clr);
    
    if (!empty($clr_code) && !empty($preset_msg)) {
      $page[$region]['system_main']['#markup'] = '<div class="'. $clr_code .'" role="alert">' . $preset_msg . ' (Posted on: ' . $msg_date . ')' . $page[$region]['system_main']['#markup'] . '</div>';
    }
  } else if ($msg_type == 5) { // end no custom msg
    // For custom alerts
    // Set alert color based on setting
    $clr_code = color_setter($cust_msg_clr);
    
    if (!empty($clr_code) && !empty($cust_msg)) {
      $page[$region]['system_main']['#markup'] = '<div class="'. $clr_code .'" role="alert">' . $cust_msg . ' (Posted on: ' . $msg_date . ')' . $page[$region]['system_main']['#markup'] . '</div>';
    }
  } // end custom msg

}

/**
 * Code beyond this point is for the Settings page.
 */

/**
 * Implements hook_form().
 */

function broadcast_dashboard_get_message_names() {
  /*$get_message_names = db_query('SELECT bd_msg_title FROM broadcast_dashboard WHERE bd_msg_type=1')->fetchAllKeyed();
  $get_message_names_raw = db_query('SELECT bd_msg_title FROM broadcast_dashboard WHERE bd_msg_type=1');
  $raw_result = $get_message_names_raw->fetchAllAssoc('bg_msg_title');
  drupal_set_message (t($raw_result));
  debug_to_console($get_message_names_raw->bg_msg_title); //debug
  return $get_message_names;*/
  
  //Query DB for Rows
  $query = db_select('broadcast_dashboard');
  $query->fields('broadcast_dashboard', array('bd_id', 'bd_msg_title',));
  $query->orderBy('bd_id', 'ASC');
  $results = $query->execute();

  //define rows
  $title_options = array();

  //test if the results array has any values
  if (is_array($results) || is_object($results)) {
    foreach ($results as $result) {
      $title_options[$result->bd_id] = $result->bd_msg_title;
    }
  }

  return $title_options;
}

/*function broadcast_dashboard_get_message_text($arg) {
  $get_message_text = db_query('SELECT bd_id, bd_msg_text FROM broadcast_dashboard WHERE bd_msg_type=1 AND bd_msg_title=$arg');
  return $get_message_text;
}*/

function broadcast_dashboard_settings_form($form_state) {
  $theme_default = variable_get('theme_default', NULL);
  $regions = system_region_list($theme_default, $show = REGIONS_ALL, $labels = TRUE);

  $default_title = t('Select a message');

  // Header
  $form['broadcast_dashboard_settings_msg_header'] = array(
    '#type' => 'markup',
    '#markup' => t('<h2>Custom Messages</h2>'),
  );

  // Custom message selector
  $form['broadcast_dashboard_setting_custom_message_select'] = array(
    '#type' => 'select',
    '#title' => t('Messages'),
    '#default_value' => $default_title,
    '#options' => broadcast_dashboard_get_message_names(),
    '#description' => t('Select a custom message to add or edit.'),
    '#required' => FALSE,
    /*'#states' => array(
      'visible' => array(
        ':input[name="data_set"]' => array('value' => 'broadcast_dashboard'),
      ),
    ),*/
  );

  // Custom message editor
  /*$form['broadcast_dashboard_setting_custom_message_edit'] = array(
    '#type' => 'textbox',
    '#title' => t('Message Display'),
    '#default_value' => broadcast_dashboard_get_message_text($arg), // ??? @todo how to pass var for call
    '#options' => array(broadcast_dashboard_get_message_names()),
    '#description' => t('Select a custom message to add or edit.'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        "input[name='broadcast_dashboard_setting_custom_message_select']" => array("checked" => TRUE)),
      "required" => array(
        "input[name='broadcast_dashboard_setting_custom_message_select']" => array("checked" => TRUE)),
    ),
  );*/

  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */

function broadcast_dashboard_settings_form_submit($form, &$form_state) {
  $form_has_errors = FALSE;

  if ($form_has_errors == FALSE) {
    drupal_set_message(t('The settings have successfully been saved.'));
  }
}

/**
 * Debug function for testing
 */
function debug_to_console( $data ) {
    $output = $data;
    if ( is_array( $output ) )
        $output = implode( ',', $output);
    echo "<script>console.log( 'Debug Objects: " . $output . "' );</script>";
}