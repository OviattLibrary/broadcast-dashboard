<?php
// $Id$
/**
 * @file
 * Broadcast Dashboard module file
 * 
 * This module 'broadcasts' pre-written or custom inserted text to specified areas of a website when switched on.
 */

/**
 * Implements hook_help().
 */

function broadcast_dashboard_help($path, $arg) {
  if ($path === 'admin/help#broadcast_dashboard') {
    return t ('The Broadcast Dashboard module allows for text notifications to be pushed to specified areas of the website when switched on.');
  }
}

/**
 * Implements hook_menu().
 */

function broadcast_dashboard_menu() {
  $items = array();

  $items['admin/config/system/broadcast_dashboard'] = array(
    'title' => 'Broadcast Dashboard',
    'description' => 'Set a message for the Broadcast Dashboard module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('broadcast_dashboard_form'),
    'access_callback' => TRUE,
    'access arguments' => array('message broadcast dashboard'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/broadcast_dashboard/broadcast'] = array(
    'title' => 'Message Broadcast',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['admin/config/system/broadcast_dashboard/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configuration for the Broadcast Dashboard module.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('broadcast_dashboard_settings_form'),
    'access arguments' => array('configure broadcast dashboard'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function broadcast_dashboard_permission() {
  return array(
    'message broadcast dashboard' => array (
      'title' => t('Publish Broadcast Dashboard Messages'),
      'description' => t('Send out Broadcast Dashboard alerts.'),
    ),
    'configure broadcast dashboard' => array (
      'title' => t('Administer Broadcast Dashboard'),
      'description' => t('Change configuration for Broadcast Dashboard.'),
    ),
  );
}

/**
 * Implements hook_forms().
 */

function broadcast_dashboard_forms($form_id, $args) {
  // Simply reroute the (non-existing) $form_id
  $forms['broadcast_dashboard_form'] = array(
    'callback' => 'broadcast_dashboard_form',
  );

  // Reroute the $form_id and prepend an additional argument that gets passed to
  // the 'mymodule_main_form' form builder function.
  $forms['broadcast_dashboard_settings_form'] = array(
    'callback' => 'broadcast_dashboard_settings_form',
  );

  return $forms;
}

/**
 * Implements hook_form().
 */

function broadcast_dashboard_form($form_state) {  
  $theme_default = variable_get('theme_default', NULL);
  $regions = system_region_list($theme_default, $show = REGIONS_ALL, $labels = TRUE);

  if(user_access('configure broadcast dashboard')) {
    $form['settings_markup'] = array(
      '#type' => 'markup',
      '#markup' => t('<div id="settingsmarkup"><p>To edit module configuration, see the <a href="/admin/config/system/broadcast_dashboard/settings">Settings tab</a>.</p></div>'),
    );
  } else {
    $form['settings_markup'] = array(
      '#type' => 'markup',
      '#markup' => t('<div id="settingsmarkup"><p>Contact your system administrator to make configuration changes.</p></div>'),
    );
  }

  //drupal_set_message(t('To edit module configuration, see the <a href="/admin/config/system/broadcast_dashboard/settings">Settings page</a>.'), 'status', FALSE);

  function broadcast_dashboard_get_messages_selector($element) {
  if ($element == "" || is_null($element)) {
    $element = "bd_id";
  }

  //Query DB for Rows
  $query = db_select('broadcast_dashboard');
  $query->fields('broadcast_dashboard', array('bd_id', 'bd_msg_title', 'bd_msg_text',));
  $query->orderBy('bd_id', 'ASC');
  $results = $query->execute();

  //define rows
  $title_options = array();

  //test if the results array has any values
  $custom_val = "custom_msg";
  if (is_array($results) || is_object($results)) {
    foreach ($results as $result) {
      $title_options[$result->$element] = $result->bd_msg_title;
    }
    $title_options[$custom_val] = "Custom";
  }
  return $title_options;
}

 // Custom message selector
  $form['broadcast_dashboard_message'] = array(
    '#type' => 'select',
    '#title' => t('Messages'),
    '#default_value' => variable_get('broadcast_dashboard_message'),
    '#options' => broadcast_dashboard_get_messages_selector("bd_id"),
    '#description' => t('Select a pre-written message to broadcast, or input a custom one.'),
    '#required' => FALSE,
    '#states' => array(
      "required" => array(
      "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
    ),
  );

  $form['broadcast_dashboard_region'] = array(
    '#type' => 'select',
    '#title' => t('Region Selection'),
    '#default_value' => variable_get('broadcast_dashboard_region', 0),
    '#options' => $regions,
    '#description' => t('Select a location to display the message.'),
    '#required' => FALSE,
    '#states' => array(
      "required" => array(
      "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
    ),
  );

  $form['broadcast_dashboard_custom_message'] = array (
    '#type' => 'textarea',
    '#default_value' => variable_get('broadcast_dashboard_custom_message_entered'),
    '#title' => t('Custom Message'),
    '#description' => t('Custom message to appear in place of pre-written notification text.'),
    '#size' => 60,
    '#maxlength' => 255,
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg')),
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg')),
    ),
  );

  $form['broadcast_dashboard_custom_color'] = array(
    '#type' => 'radios',
    '#title' => t('Message Color'),
    '#options' => array(
      'class' => t('CSS Class'),
      'hex' => t('Hex Code'),
    ),
    '#description' => t('Select how to set the message\'s background color.'),
    '#required' => FALSE,
    '#default_value' => 'class',
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg')),
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg')),
    ),
  );

  $form['broadcast_dashboard_custom_color_css'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS Class'),
    '#default_value' => variable_get('broadcast_dashboard_message_cust_class'),
    '#description' => t('Classes that will be added to this message\'s display.'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg'),
        ":input[name='broadcast_dashboard_custom_color']" => array("value" => 'class')),
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg'),
        ":input[name='broadcast_dashboard_custom_color']" => array("value" => 'class')),
    ),
  );

  $form['broadcast_dashboard_custom_color_hex'] = array(
    '#type' => 'textfield',
    '#title' => t('Hex Code'),
    '#default_value' => variable_get('broadcast_dashboard_custom_color_hex'),
    '#description' => t('Color hex code that will be added to this message\'s display. Example: #ffffff'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg'),
        ":input[name='broadcast_dashboard_custom_color']" => array("value" => 'hex')),
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE),
        ":input[name='broadcast_dashboard_message']" => array("value" => 'custom_msg'),
        ":input[name='broadcast_dashboard_custom_color']" => array("value" => 'hex')),
    ),
  );

  /** *********************** **
   ** SECTION FOR HIDDEN VALS **
   ** *********************** **/

  // Dynamically pre-insert values of pre-written messages into page

  /** HIDDEN COLOR ELEMENTS **/

  // Get values for loop
  $query = db_select('broadcast_dashboard');
  $query->fields('broadcast_dashboard', array('bd_id', 'bd_clr_class', 'bd_clr_hex'));
  $query->orderBy('bd_id', 'ASC');
  $results = $query->execute();

  // For each color element in the table, create a hidden element
  while ($row = $results->fetch(PDO::FETCH_BOTH)) {
    //printf("ID: %s  class_name: %s  class_hex: %s", $row["bd_id"], $row["bd_clr_class"], $row["bd_clr_hex"]);

    if (!empty($row["bd_clr_class"])) {
      $form['broadcast_dashboard_clr_class_' . $row["bd_id"]] = array(
        '#type' => 'hidden',
        '#title' => t('Message Color Class'),
        '#default_value' => $row["bd_clr_class"],
        '#description' => t('The color class of the selected pre-written message ID' . $row["bd_id"]),
        '#required' => FALSE,
      );
    } else if (!empty($row["bd_clr_hex"])) {
      $form['broadcast_dashboard_clr_hex_' . $row["bd_id"]] = array(
        '#type' => 'hidden',
        '#title' => t('Message Color Hex'),
        '#default_value' => $row["bd_clr_hex"],
        '#description' => t('The hex color of the selected pre-written message ID' . $row["bd_id"]),
        '#required' => FALSE,
      );
    }
  }

  /** HIDDEN MESSAGE TEXT **/

  // Get values for loop
  $query = db_select('broadcast_dashboard');
  $query->fields('broadcast_dashboard', array('bd_id', 'bd_msg_text'));
  $query->orderBy('bd_id', 'ASC');
  $results = $query->execute();

  // For each message element in the table, create a hidden element
  while ($row = $results->fetch(PDO::FETCH_BOTH)) {
    //printf("ID: %s  class_name: %s  class_hex: %s", $row["bd_id"], $row["bd_clr_class"], $row["bd_clr_hex"]);

    $form['broadcast_dashboard_msg_text_' . $row["bd_id"]] = array(
        '#type' => 'hidden',
        '#title' => t('Message Text Values'),
        '#default_value' => $row["bd_msg_text"],
        '#description' => t('The message text of the selected pre-written message ID' . $row["bd_id"]),
        '#required' => FALSE,
      );
  }

  /** DATE FOR PREVIEW JS **/

  $form['broadcast_dashboard_date_message_posted'] = array(
    '#type' => 'hidden',
    '#title' => t('Date Message Posted'),
    '#default_value' => null,
    '#description' => t('The date and time the message was posted.'),
    '#required' => FALSE,
  );

  /** ********************** **
   ** END HIDDEN VAL SECTION **
   ** ********************** **/

  // Include Preview Javascript file
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'broadcast_dashboard') . '/broadcast_dashboard_preview.js',
  );

  // Activation toggle
  $form['broadcast_dashboard_active'] = array(
    '#type' => "checkbox",
    '#title' => t('Activate Broadcast'),
    '#return_value' => 1,
    '#default_value' => variable_get('broadcast_dashboard_active', 0),
    '#description' => t('When activated, the selected message will be broadcast on the website.'),
  );

  // Preview button
  $form['preview'] = array(
    '#type' => 'button',
    '#value' => t('Preview'),
    '#executes_submit_callback' => FALSE,
    '#attributes' => array('onclick' => "return (false);"),//array('onclick' => "runPreview('".$test_var."'); return (false);"),
    '#states' => array(
      "required" => array(
        "input[name='broadcast_dashboard_active']" => array("checked" => TRUE)),
    ),
  );

  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  // Preview area
  $form['preview_area'] = array(
    '#type' => 'markup',
    '#markup' => t('<div id="markuparea"></div>'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */

function broadcast_dashboard_form_submit($form, &$form_state) {
  $form_has_errors = FALSE;

  // Active Check
  /*$current_active = $form_state['values']['broadcast_dashboard_active'];
  $previous_active = variable_get('broadcast_dashboard_active');*/
  $set_active = $form_state['values']['broadcast_dashboard_active'];
  variable_set('broadcast_dashboard_active', $set_active);

  // Message ID Set
  /*$current_msg_id = $form_state['values']['broadcast_dashboard_message'];
  $previous_msg_id = variable_get('broadcast_dashboard_message');*/
  $set_msg_id = $form_state['values']['broadcast_dashboard_message'];
  variable_set('broadcast_dashboard_message', $set_msg_id);

  // Region Set
  /*$current_region = $form_state['values']['broadcast_dashboard_region'];
  $previous_region = variable_get('broadcast_dashboard_region');*/
  $set_region = $form_state['values']['broadcast_dashboard_region'];
  variable_set('broadcast_dashboard_region', $set_region);
  
  // Custom Message Set
  if ($set_msg_id != "custom_msg") {
    // Is not a custom message
    variable_set('broadcast_dashboard_custom_message_entered', null);
    variable_set('broadcast_dashboard_message_cust_class', null);
    variable_set('broadcast_dashboard_message_cust_hex', null);

    // Get pre-written message
    $set_prew_msg = $form_state['values']['broadcast_dashboard_msg_text_' . $set_msg_id];
    variable_set('broadcast_dashboard_message_prew', $set_prew_msg);

    // Get color
    if ($form_state['values']['broadcast_dashboard_clr_class_' . $set_msg_id] != ""){
      $set_prew_class = $form_state['values']['broadcast_dashboard_clr_class_' . $set_msg_id];
      variable_set('broadcast_dashboard_message_prew_class', $set_prew_class);
      variable_set('broadcast_dashboard_message_prew_hex', null); //unset unused
    } else if ($form_state['values']['broadcast_dashboard_clr_hex_' . $set_msg_id] != ""){
      $set_prew_hex = $form_state['values']['broadcast_dashboard_clr_hex_' . $set_msg_id];
      variable_set('broadcast_dashboard_message_prew_hex', $set_prew_hex);
      variable_set('broadcast_dashboard_message_prew_class', null); //unset unused
    }

    if ($set_active == "1") {
      // The message has been activated, log as such

      // Watchdog log for pre-set message set
      $log_message_name = broadcast_dashboard_get_value($set_msg_id, "bd_msg_title");
      watchdog("broadcast_dashboard", "%m message activated", array('%m' => $log_message_name, WATCHDOG_INFO));
    } else if ($set_active != "1") {
      // The message has been deactivated, log as such

      // Watchdog log for pre-set message set
      $log_message_name = broadcast_dashboard_get_value($set_msg_id, "bd_msg_title");
      watchdog("broadcast_dashboard", "%m message deactivated", array('%m' => $log_message_name, WATCHDOG_INFO));
    }

  } else if ($set_msg_id == "custom_msg") {
    // Is a custom msg
    variable_set('broadcast_dashboard_message_prew', null);
    variable_set('broadcast_dashboard_message_prew_class', null);
    variable_set('broadcast_dashboard_message_prew_hex', null);
    
    // Set custom message
    $set_cust_msg = $form_state['values']['broadcast_dashboard_custom_message'];
    variable_set('broadcast_dashboard_custom_message_entered', $set_cust_msg);

    // Set color
    $set_cust_class = $form_state['values']['broadcast_dashboard_custom_color_css'];
    $set_cust_hex = $form_state['values']['broadcast_dashboard_custom_color_hex'];

    // Hex check for string
    if (!empty($set_cust_hex)) {
      $firstCharacter = substr($set_cust_hex, 0, 1);

      if ($firstCharacter != "#") {
        $set_cust_hex = "#" . $set_cust_hex;
      }
      
    }

    if ($set_cust_class != ""){
      // Class
      variable_set('broadcast_dashboard_message_cust_class', $set_cust_class);
      variable_set('broadcast_dashboard_message_cust_hex', null); //unset unused
    } else if ( $set_cust_hex != ""){
      // Hex
      variable_set('broadcast_dashboard_message_cust_hex', $set_cust_hex);
      variable_set('broadcast_dashboard_message_cust_class', null); //unset unused
    }

    if ($set_active == "1") {
      // The message has been activated, log as such

      // Watchdog log for pre-set message set
      $log_message_name = broadcast_dashboard_get_value($set_msg_id, "bd_msg_title");
      watchdog("broadcast_dashboard", "Custom message activated", array(WATCHDOG_INFO));
    } else if ($set_active != "1") {
      // The message has been deactivated, log as such

      // Watchdog log for pre-set message set
      $log_message_name = broadcast_dashboard_get_value($set_msg_id, "bd_msg_title");
      watchdog("broadcast_dashboard", "Custom message deactivated", array(WATCHDOG_INFO));
    }

  }

  // Set date and time message posted
  variable_set('broadcast_dashboard_date_message_posted', date("m/d/Y h:i:sa"));

  if ($form_has_errors == FALSE) {
    drupal_set_message(t('The settings have successfully been saved.'));
  }
}

/**
 * Custom function for testing output.
 *
 * @param bool $active
 *   A boolean that indicates whether Broadcast message should be displayed or not.
 *
 * @param array $msg_type
 *   Array of type of message - includes custom message option.
 *
 * @param string $region
 *   String containing region name to be passed to alter function.
 *
 * @param string $cust_msg
 *   String containing custom Broadcast message.
 *
 * @param string $cust_msg_clr
 *   String containing semantic color for message box.
 *
 */

function broadcast_dashboard_test_display() {                  

  global $theme_key; 
  print 'Our current theme is: ' . $theme_key . '<br>';

  $regions = system_region_list($theme_key, $show = REGIONS_ALL, $labels = TRUE);
  print '<pre>';
  print_r($regions);
  print '</pre>';

  $active = variable_get('broadcast_dashboard_active'); 

  print 'Active state is: ' . $active; print "<br>";
  
  if ($active == 1) {
    $broadcast_dashboard_test_display_msg_id = variable_get('broadcast_dashboard_message');  
    $broadcast_dashboard_test_display_region = variable_get('broadcast_dashboard_region');
    $broadcast_dashboard_test_display_cust_msg = variable_get('broadcast_dashboard_custom_message_entered');

    $broadcast_dashboard_test_display_cust_msg_class = variable_get('broadcast_dashboard_message_cust_class');
    $broadcast_dashboard_test_display_cust_msg_hex = variable_get('broadcast_dashboard_message_cust_hex');

    $broadcast_dashboard_test_display_prew_msg = variable_get('broadcast_dashboard_message_prew');

    $broadcast_dashboard_test_display_preset_clr_class = variable_get('broadcast_dashboard_message_prew_class');
    $broadcast_dashboard_test_display_preset_clr_hex = variable_get('broadcast_dashboard_message_prew_hex');

    print 'Message ID is: '. $broadcast_dashboard_test_display_msg_id; print "<br>";
    print 'Target region is: '. $broadcast_dashboard_test_display_region; print "<br>";
    print 'Pre-written msg is: '. $broadcast_dashboard_test_display_prew_msg; print "<br>";
    print 'Pre-written clr class is: '. $broadcast_dashboard_test_display_preset_clr_class; print "<br>";
    print 'Pre-written clr hex is: '. $broadcast_dashboard_test_display_preset_clr_hex; print "<br>";
    print 'Custom message is: '. $broadcast_dashboard_test_display_cust_msg; print "<br>";
    print 'Custom message class is: '. $broadcast_dashboard_test_display_cust_msg_class; print "<br>";
    print 'Custom message hex is: '. $broadcast_dashboard_test_display_cust_msg_hex; print "<br>";
  }

  print '<br>';
  $msg_date = date("m/d/Y h:i:sa");
  print $msg_date;
}

/**
 * Implements hook_page_build().
 */

function broadcast_dashboard_page_build(&$page) {
  $active = variable_get('broadcast_dashboard_active');
  $msg_id = variable_get('broadcast_dashboard_message');
  $preset_msg = variable_get('broadcast_dashboard_message_prew');
  $preset_clr_class = variable_get('broadcast_dashboard_message_prew_class');
  $preset_clr_hex = variable_get('broadcast_dashboard_message_prew_hex');
  $region = variable_get('broadcast_dashboard_region');
  $cust_msg = variable_get('broadcast_dashboard_custom_message_entered');
  $cust_msg_clr_class = variable_get('broadcast_dashboard_message_cust_class');
  $cust_msg_clr_hex = variable_get('broadcast_dashboard_message_cust_hex');
  $msg_date = variable_get('broadcast_dashboard_date_message_posted');

  if (!isset($page[$region]['system_main'])) {
    $page[$region]['system_main'] = '';
  }

  // DEV - test notification
  $markup_content = '<div class="alert alert-info" role="alert">This system is currently being tested. Ignore any alerts.' . $page[$region]['system_main']['#markup'] . '</div>';

  // No custom, push preset message
  if (($active == 1) && ($msg_id != "custom_msg")) {  
    if (isset($preset_clr_class)) {
      //$page[$region]['system_main']['#markup'] = '<div class="' . $preset_clr_class . '"><p role="alert" aria-live="assertive">' . $preset_msg . " (Posted on: " . $msg_date . ')' . '</p></div>' . $markup_content;
      $message_content = '<div class="' . $preset_clr_class . '"><p role="alert" aria-live="assertive">' . $preset_msg . " (Posted on: " . $msg_date . ')' . '</p></div>' . $markup_content;
      $page[$region]['system_main'] = array(
        '#markup' => $message_content,
      );

    } else if (isset($preset_clr_hex)) {
      $page[$region]['system_main']['#markup'] = '<div style="background-color: ' . $preset_clr_hex . '; padding: 15px; border: 1px solid transparent; border-radius: 4px; margin-bottom: 20px;"><p role="alert" aria-live="assertive">' . $preset_msg . " (Posted on: " . $msg_date . ')</div>' . '</p></div>' . $markup_content;
    }
  } else if (($active == 1) && ($msg_id == "custom_msg")) { // end no custom msg
    // For custom alerts
    // Set alert color based on setting
     if (isset($cust_msg_clr_class)) {
      $page[$region]['system_main']['#markup'] = '<div class="' . $cust_msg_clr_class . '"><p role="alert" aria-live="assertive">' . $cust_msg . " (Posted on: " . $msg_date . ')' . '</p></div>' . $markup_content;
    } else if (isset($cust_msg_clr_hex)) {
      $page[$region]['system_main']['#markup'] = '<div style="background-color: ' . $cust_msg_clr_hex . '; padding: 15px; border: 1px solid transparent; border-radius: 4px; margin-bottom: 20px;"><p role="alert" aria-live="assertive">' . $cust_msg . " (Posted on: " . $msg_date . ')</div>' . '</p></div>' . $markup_content;
    }
  } // end custom msg

}

/**
 * Code beyond this point is for the Settings page.
 */

/**
 * Implements hook_form().
 */

function broadcast_dashboard_get_messages($element) {
  if ($element == "" || is_null($element)) {
    $element = "bd_msg_text";
  }

  //Query DB for Rows
  $query = db_select('broadcast_dashboard');
  $query->fields('broadcast_dashboard', array('bd_id', 'bd_msg_title', 'bd_msg_text'));
  $query->orderBy('bd_id', 'ASC');
  $results = $query->execute();

  //define rows
  $title_options = array();

  //test if the results array has any values
  if (is_array($results) || is_object($results)) {
    foreach ($results as $result) {
      $title_options[$result->$element] = $result->bd_msg_title;
    }
  }

  return $title_options;
}

function broadcast_dashboard_get_value($id, $element) {
  if ($element == "" || is_null($element)) {
    $element = "bd_msg_text";
  }

  //Query DB for Rows
  $query = db_select('broadcast_dashboard');
  $query->fields('broadcast_dashboard', array($element));
  $query->condition('bd_id', $id);
  $results = $query->execute();

  //define rows
  $value = array();

  //test if the results array has any values
  if (is_array($results) || is_object($results)) {
    $i = 0;
    foreach ($results as $result) {
      $value[$i] = $result->$element;
      $i++;
    }
  }

  return $value[0];
}

/**
 * Checks if the table has rows/elements.
 *
 * @return TRUE if rows exist
 * @return FALSE if no rows exist
 */
function broadcast_dashboard_has_rows() {
  // Get the number of rows in the table
  $result = db_select('broadcast_dashboard', 'bd_id')
            ->fields('bd_id')
            ->execute();
  $num_of_rows = $result->rowCount();

  if ($num_of_rows == 0) {
    return FALSE;
  } else {
    return TRUE;
  }
}

function broadcast_dashboard_settings_form($form_state) {
  $theme_default = variable_get('theme_default', NULL);
  $regions = system_region_list($theme_default, $show = REGIONS_ALL, $labels = TRUE);

  $default_title = t('Select a message');

  // Include Javascript
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'broadcast_dashboard') . '/broadcast_dashboard_value_grab.js',
    drupal_get_path('module', 'broadcast_dashboard') . '/broadcast_dashboard_preview_add.js',
  );

  if (broadcast_dashboard_has_rows()) {

    // START Update Message Block
    $form['broadcast_dashboard_settings_update_msg'] = array(
      '#type' => 'fieldset',
      '#title' => t('Update Existing Message'),
      '#description' => t('Update an existing pre-written Broadcast Dashboard message.'),
      '#collapsible' => FALSE,
    );

    // Header
    // Hiding header becasue fieldset has a title. @TODO: accessiblility -- do we need an <h2> for clarity?
    /*$form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_msg_header'] = array(
      '#type' => 'markup',
      '#markup' => t('<h2>Custom Messages</h2>'),
    );*/

    $form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_msg_custom_message_select'] = array(
      '#type' => 'select',
      '#title' => t('Messages'),
      '#default_value' => $default_title,
      '#options' => broadcast_dashboard_get_messages("bd_id"),
      '#description' => t('Select a custom message to update.'),
      '#required' => FALSE,
      /*'#states' => array(
        'visible' => array(
          ':input[name="data_set"]' => array('value' => 'broadcast_dashboard'),
        ),
      ),*/
    );

    /** *********************** **
     ** SECTION FOR HIDDEN VALS **
     ** *********************** **/

    // Dynamically pre-insert values of pre-written messages into page

    /** HIDDEN COLOR ELEMENTS **/

    // Get values for loop
    $query = db_select('broadcast_dashboard');
    $query->fields('broadcast_dashboard', array('bd_id', 'bd_msg_title', 'bd_clr_class', 'bd_clr_hex'));
    $query->orderBy('bd_id', 'ASC');
    $results = $query->execute();

    // For each color element in the table, create a hidden element
    while ($row = $results->fetch(PDO::FETCH_BOTH)) {
      //printf("ID: %s  class_name: %s  class_hex: %s", $row["bd_id"], $row["bd_clr_class"], $row["bd_clr_hex"]);

      $form['broadcast_dashboard_settings_update_msg_title_' . $row["bd_id"]] = array(
        '#type' => 'hidden',
        '#title' => t('Message Name'),
        '#default_value' => $row["bd_msg_title"],
        '#description' => t('The name of the selected pre-written message ID' . $row["bd_id"]),
        '#required' => FALSE,
      );

      if (!empty($row["bd_clr_class"])) {
        $form['broadcast_dashboard_settings_update_msg_clr_class_' . $row["bd_id"]] = array(
          '#type' => 'hidden',
          '#title' => t('Message Color Class'),
          '#default_value' => $row["bd_clr_class"],
          '#description' => t('The color class of the selected pre-written message ID' . $row["bd_id"]),
          '#required' => FALSE,
        );
      } else if (!empty($row["bd_clr_hex"])) {
        $form['broadcast_dashboard_settings_update_msg_clr_hex_' . $row["bd_id"]] = array(
          '#type' => 'hidden',
          '#title' => t('Message Color Hex'),
          '#default_value' => $row["bd_clr_hex"],
          '#description' => t('The hex color of the selected pre-written message ID' . $row["bd_id"]),
          '#required' => FALSE,
        );
      }
    }

    /** HIDDEN MESSAGE TEXT **/

    // Get values for loop
    $query = db_select('broadcast_dashboard');
    $query->fields('broadcast_dashboard', array('bd_id', 'bd_msg_text'));
    $query->orderBy('bd_id', 'ASC');
    $results = $query->execute();

    // For each message element in the table, create a hidden element
    while ($row = $results->fetch(PDO::FETCH_BOTH)) {
      //printf("ID: %s  class_name: %s  class_hex: %s", $row["bd_id"], $row["bd_clr_class"], $row["bd_clr_hex"]);

      $form['broadcast_dashboard_settings_update_msg_msg_text_' . $row["bd_id"]] = array(
        '#type' => 'hidden',
        '#title' => t('Message Text Values'),
        '#default_value' => $row["bd_msg_text"],
        '#description' => t('The message text of the selected pre-written message ID' . $row["bd_id"]),
        '#required' => FALSE,
      );
    }

    /** ********************** **
     ** END HIDDEN VAL SECTION **
     ** ********************** **/

    // Name of message editor
    $form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_msg_custom_name_edit'] = array(
      '#type' => 'textfield',
      '#title' => t('Message Name'),
      //'#default_value' => broadcast_dashboard_get_message_text($arg),
      '#default_value' => NULL,
      '#description' => t('The name used to identify the message.'),
      '#required' => TRUE,
    );

    // Custom message editor
    $form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_msg_custom_message_edit'] = array(
      '#type' => 'textarea',
      '#title' => t('Message Text'),
      //'#default_value' => broadcast_dashboard_get_message_text($arg),
      '#default_value' => NULL,
      '#description' => t('The text that will be displayed when the selected message is turned on.'),
      '#required' => TRUE,
    );

    $form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_color'] = array(
    '#type' => 'radios',
    '#title' => t('Message Color'),
    '#options' => array(
      'class' => t('CSS Class'),
      'hex' => t('Hex Code'),
    ),
    '#description' => t('Select how to set the message\'s background color.'),
    '#required' => FALSE,
    '#default_value' => 'class',
  );

  $form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_css_class'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS Class'),
    '#default_value' => NULL,
    '#description' => t('Classes that will be added to this message\'s display.'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_settings_update_color']" => array("value" => 'class')),
      "required" => array(
        ":input[name='broadcast_dashboard_settings_update_color']" => array("value" => 'class')),
    ),
  );

  $form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_hex_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Hex Code'),
    '#default_value' => NULL,
    '#description' => t('Color hex code that will be added to this message\'s display. Example: #ffffff'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_settings_update_color']" => array("value" => 'hex')),
      "required" => array(
        ":input[name='broadcast_dashboard_settings_update_color']" => array("value" => 'hex')),
    ),
  );

    // Submit button
    $form['broadcast_dashboard_settings_update_msg']['update_existing_message_submit'] = array(
      '#name' => 'submit_update_msg',
      '#type' => 'submit',
      '#value' => t('Update message'),
      '#submit' => array('broadcast_dashboard_settings_edit'),
    );

    // END Update Message Block

    // START Delete Message Block

    // Include confirmation popup content
    $form['#attached']['js'][] = drupal_get_path('module', 'broadcast_dashboard') . '/broadcast_dashboard_confirm_delete.js';
    $form['#attached']['css'][] = drupal_get_path('module', 'broadcast_dashboard') . '/broadcast_dashboard_confirm_delete.css';

    $form['broadcast_dashboard_settings_delete_msg'] = array(
      '#type' => 'fieldset',
      '#title' => t('Delete Existing Message'),
      '#description' => t('Delete an existing pre-written Broadcast Dashboard message.'),
      '#collapsible' => FALSE,
    );

    // Header
    // Hiding header becasue fieldset has a title. @TODO: accessiblility -- do we need an <h2> for clarity?
    /*$form['broadcast_dashboard_settings_update_msg']['broadcast_dashboard_settings_update_msg_header'] = array(
      '#type' => 'markup',
      '#markup' => t('<h2>Delete Messages</h2>'),
    );*/

    // Custom message selector
    $form['broadcast_dashboard_settings_delete_msg']['broadcast_dashboard_settings_delete_msg_custom_message_select'] = array(
      '#type' => 'select',
      '#title' => t('Messages'),
      '#default_value' => $default_title,
      '#options' => broadcast_dashboard_get_messages("bd_id"),
      '#description' => t('Select a custom message to delete.'),
      '#required' => FALSE,
      /*'#states' => array(
        'visible' => array(
          ':input[name="data_set"]' => array('value' => 'broadcast_dashboard'),
        ),
      ),*/
    );

    // Submit button
    $form['broadcast_dashboard_settings_delete_msg']['delete_existing_message_submit'] = array(
      '#name' => 'submit_delete_message',
      '#type' => 'submit',
      '#value' => t('Delete message'),
      '#submit' => array('broadcast_dashboard_settings_delete'),
    );

    // @TODO: Confirmation pop-up (hook confirm_form())

    // END Delete Message Block

  } else {
    drupal_set_message(t('Add a pre-written message to unlock editing and deleting.'), 'warning');
  } // end has_rows() check

  // START Add Message Block

  $form['broadcast_dashboard_settings_add_msg'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Message'),
    '#description' => t('Add a new pre-written Broadcast Dashboard message.'),
    '#collapsible' => FALSE,
  );

  // Custom message add
  $form['broadcast_dashboard_settings_add_msg']['broadcast_dashboard_settings_add_msg_name_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message Name'),
    //'#default_value' => broadcast_dashboard_get_message_text($arg),
    '#default_value' => NULL,
    '#description' => t('How this message will be identified in the backend.'),
    '#required' => FALSE,
    '#states' => array(
      'required' => array(
        ":input[name='broadcast_dashboard_settings_add_msg_custom_message']" => array('filled' => TRUE),
      ),
      array(
        ":input[name='broadcast_dashboard_settings_add_color']" => array('filled' => TRUE),
      ),
      array(
        ":input[name='broadcast_dashboard_settings_add_msg_name_message']" => array('filled' => TRUE),
      ),
    ),
  );

  $form['broadcast_dashboard_settings_add_msg']['broadcast_dashboard_settings_add_msg_custom_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message Text'),
    //'#default_value' => broadcast_dashboard_get_message_text($arg),
    '#default_value' => NULL,
    '#description' => t('The text that will be displayed when the selected message is turned on.'),
    '#required' => FALSE,
    '#states' => array(
      'required' => array(
        ":input[name='broadcast_dashboard_settings_add_msg_name_message']" => array('filled' => TRUE),
      ),
      array(
        ":input[name='broadcast_dashboard_settings_add_color']" => array('filled' => TRUE),
      ),
      array(
        ":input[name='broadcast_dashboard_settings_add_msg_custom_message']" => array('filled' => TRUE),
      ),
    ),
  );

  $form['broadcast_dashboard_settings_add_msg']['broadcast_dashboard_settings_add_color'] = array(
    '#type' => 'radios',
    '#title' => t('Message Color'),
    '#options' => array(
      'class' => t('CSS Class'),
      'hex' => t('Hex Code'),
    ),
    '#description' => t('Select how to set the message\'s background color.'),
    '#required' => FALSE,
    '#default_value' => 'class',
    '#states' => array(
      'required' => array(
        ":input[name='broadcast_dashboard_settings_add_msg_name_message']" => array('filled' => TRUE),
      ),
      array(
        ":input[name='broadcast_dashboard_settings_add_msg_custom_message']" => array('filled' => TRUE),
      ),
    ),
  );

  $form['broadcast_dashboard_settings_add_msg']['broadcast_dashboard_settings_add_css_class'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS Class'),
    '#default_value' => NULL,
    '#description' => t('Classes that will be added to this message\'s display.'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_settings_add_color']" => array("value" => 'class')),
      "required" => array(
        ":input[name='broadcast_dashboard_settings_add_color']" => array("value" => 'class')),
    ),
  );

  $form['broadcast_dashboard_settings_add_msg']['broadcast_dashboard_settings_add_hex_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Hex Code'),
    '#default_value' => NULL,
    '#description' => t('Color hex code that will be added to this message\'s display. Example: #ffffff'),
    '#required' => FALSE,
    '#states' => array(
      "visible" => array(
        ":input[name='broadcast_dashboard_settings_add_color']" => array("value" => 'hex')),
      "required" => array(
        ":input[name='broadcast_dashboard_settings_add_color']" => array("value" => 'hex')),
    ),
  );

  // Preview button
  $form['broadcast_dashboard_settings_add_msg']['broadcast_dashboard_settings_add_preview'] = array(
    '#type' => 'button',
    '#value' => t('Preview'),
    '#executes_submit_callback' => FALSE,
    '#attributes' => array('onclick' => "return (false);"),//array('onclick' => "runPreview('".$test_var."'); return (false);"),
  );

  // Submit button
    $form['broadcast_dashboard_settings_add_msg']['broadcast_dashboard_settings_add_submit'] = array(
      '#name' => 'submit_add_message',
      '#type' => 'submit',
      '#value' => t('Add message'),
      '#submit' => array('broadcast_dashboard_settings_add'),
    );

  // END Add Message Block

  // Preview area
  $form['broadcast_dashboard_settings_add_msg']['preview_area'] = array(
    '#type' => 'markup',
    '#markup' => t('<div id="markuparea"></div>'),
  );

  return $form;
}

/**
 * Form submission functions.
 *
 * Does not extend hook_form_submit().
 */

/**
 * For the edited of a current message form.
 */
function broadcast_dashboard_settings_edit($form, &$form_state) {
  $form_has_errors = FALSE;

  // Check if message text is blank
  if (!empty($form_state['values']['broadcast_dashboard_settings_update_msg_custom_message_edit'])) {
    $current_id = $form_state['values']['broadcast_dashboard_settings_update_msg_custom_message_select'];
    $new_name = $form_state['values']['broadcast_dashboard_settings_update_msg_custom_name_edit'];
    $new_msg = $form_state['values']['broadcast_dashboard_settings_update_msg_custom_message_edit'];
    $new_class = $form_state['values']['broadcast_dashboard_settings_update_css_class'];
    $new_hex = $form_state['values']['broadcast_dashboard_settings_update_hex_code'];

    // Watchdog message edited
    watchdog("broadcast_dashboard", "%m message modified", array('%m' => $new_name, WATCHDOG_INFO));

    // Update query
    $query = db_update('broadcast_dashboard');
    $query->condition('bd_id',$current_id);
    $query->fields(
      array(
        'bd_msg_title' => $new_name,
        'bd_msg_text' => $new_msg,
        'bd_clr_class' => $new_class,
        'bd_clr_hex' => $new_hex,
      )
    );
    $results = $query->execute();
  }

  if ($form_has_errors == FALSE) {
    drupal_set_message(t('The settings have successfully been saved.'));
  }
}

/**
 * For the deletion of a current message form.
 */
function broadcast_dashboard_settings_delete($form, &$form_state) {
  $form_has_errors = FALSE;

  $delete_row = $form_state['values']['broadcast_dashboard_settings_delete_msg_custom_message_select'];

  // Watchdog message deleted
  $log_message_name = broadcast_dashboard_get_value($delete_row, "bd_msg_title");
  watchdog("broadcast_dashboard", "%m message deleted", array('%m' => $log_message_name, WATCHDOG_INFO));

  // Get the number of rows in the table
  $result = db_select('broadcast_dashboard', 'bd_id')
            ->fields('bd_id')
            ->execute();
  $num_of_rows = $result->rowCount();

  if ($delete_row <= $num_of_rows) {
    echo "Delete row: " + $delete_row;
    echo "Num rows: " + $num_of_rows;
    echo "Would be deleted.";
  }

  // Delete query
  $query = db_delete('broadcast_dashboard')
    ->condition('bd_id', $delete_row)
    ->execute();

  if ($form_has_errors == FALSE) {
    drupal_set_message(t('The selected message was deleted successfully.'));
  }
}

/**
 * For the addition of a current message form.
 */
function broadcast_dashboard_settings_add($form, &$form_state) {
  $form_has_errors = FALSE;

  $add_name = $form_state['values']['broadcast_dashboard_settings_add_msg_name_message'];
  $add_msg = $form_state['values']['broadcast_dashboard_settings_add_msg_custom_message'];
  $add_class = $form_state['values']['broadcast_dashboard_settings_add_css_class'];
  $add_hex = $form_state['values']['broadcast_dashboard_settings_add_hex_code'];

  if (empty($add_name)) echo "add name empty<br>";
  if (empty($add_msg)) echo "add msg empty<br>";
  if (empty($add_class)) echo "add class empty<br>";
  if (empty($add_hex)) echo "add hex empty<br>";

  //die();

  // Hex check for string
  if (!empty($add_hex)) {
    $firstCharacter = substr($add_hex, 0, 1);

    echo "Hex input: " . $add_hex . "\n";
    echo "First char: " . $firstCharacter . "\n";

    if ($firstCharacter != "#") {
      $add_hex = "#" . $add_hex;
    }

    echo "New hex: " . $add_hex;
  }

  if (!empty($add_name) && !empty($add_msg) && (!empty($add_class) || !empty($add_hex)) ) {
    // Fields are fine
    $result = db_insert('broadcast_dashboard')
      ->fields(
        array(
          //'bd_id' => auto increments
          'bd_msg_title' => $add_name,
          'bd_msg_text' => $add_msg,
          'bd_clr_class' => $add_class,
          'bd_clr_hex' => $add_hex,
        )
      )->execute();
  } else {
    // Form has errors
    $form_has_errors = TRUE;
  }

  if ($form_has_errors == FALSE) {
    // Watchdog add message
    watchdog("broadcast_dashboard", "%m message added", array('%m' => $add_name, WATCHDOG_INFO));

    drupal_set_message(t('The message was added successfully.'));
  }

  if ($form_has_errors == TRUE) {
    drupal_set_message(t('The message was not successfully added. Make sure that all required fields are completed and try again.'),'error');
  }

}